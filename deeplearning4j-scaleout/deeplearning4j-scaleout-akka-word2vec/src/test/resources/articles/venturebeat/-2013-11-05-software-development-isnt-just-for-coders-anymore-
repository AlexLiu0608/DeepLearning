8
This sponsored post is produced by Decisions.com.
Consider the world of web design and development. Over the last decade, we have seen incredible growth from tools that make publishing web pages easier for the average consumer. Instead of living neck deep in HTML, CSS, and repositories, tools like WordPress and Wix have been monstrously successful — they provide a graphical layer (really just an abstraction of the code in the background) that enables consumers to operate in a paradigm that is more universal than any programming language.
This same trend can be found in software development. While new programming languages and frameworks abound that focus on the written code, new tools like Decisions are providing that graphical abstraction layer that enables the nontechnical user to construct applications by dragging and dropping instead of needing to know the correct syntax for an operation. Granted, a basic understanding of information systems is useful and will provide for more to be done, but in many cases the graphical representation of a process provides enough context to guide additional development.
There is debate growing among advocates for graphical development and traditional written programming languages.
The fundamental argument for proponents of graphical development is ease of use or configurability.
The counterargument among the advocates for written code is customizability, or how granularly you can affect the operations of the final product.
You could say that these development tools and platforms exist on a spectrum of customization versus configuration. To the far end of customization you have discrete programming languages, while on the far end of configuration you have WYSIWYG environments that allow for little outside of the toolbox.
I believe that the most useful approach exists somewhere in the middle. A platform or tool that allows for granular customization by experienced coders while at the same time operating in a graphical drag and drop environment that caters to the non-technical user. Why? Providing for the non-technical users typically equates to lower development cost, compounded by an accelerated development lifecycle as business requirements are more easily communicated graphically than in written code.
I am a big fan of WordPress for exactly those reasons. I can select a theme, and configure that theme to my preferences, but if I want to get into more granular detail and customize the theme I can break out my PHP skills (or hire somebody on Elance) and get exactly what I want. That is great for web development … but what about software development?
If you want to create applications or services in an environment that caters more to the non-technical user with drag and drop elements, but at the same time allow for granular customization by those trained in written programming languages you could explore platforms like Decisions.
The customize versus configure debate will continue to gather momentum over time. Yes, configurability means more people flooding into the world of design and development which might decrease the quality of published applications (do a quick search for zombie apps in iOS, Android, and Windows marketplaces… no, not those zombies), but over time the mass usability will translate into more innovation as we get more people thinking what if?
Kevin Lindquist is a Crocker Innovation Fellow from Brigham Young University who is currently serving as Director of Sales and Marketing at  workflow software vendor Decisions.com . You can find him on Twitter @GrowthHackerGuy or @DecisionsTweets
Sponsored posts are content that has been produced by a company, which is either paying for the post or has a business relationship with VentureBeat, and they’re always clearly marked. The content of news stories produced by our editorial team is never influenced by advertisers or sponsors in any way. For more information, contact sales@venturebeat.com .
