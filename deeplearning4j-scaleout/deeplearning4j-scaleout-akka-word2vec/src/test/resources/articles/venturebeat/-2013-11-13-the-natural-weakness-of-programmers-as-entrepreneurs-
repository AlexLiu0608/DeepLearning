1
You’re a builder, a creator — whether a back-end programmer, a Linux hacker, a Javascript ninja, a UX magician, a designer. You make stuff.
That’s great of course, because in a new startup everyone needs to be either making stuff or selling stuff — there’s no room for managers and executives and strategists. But this also produces a natural weakness, and when I look at what made me a successful entrepreneur — not just a great coder — it’s that I acknowledged and overcame that weakness.
The weakness is your love of creation. You love to write clean, tested, scalable, extensible, beautiful code. You love converting marketing requirements into 960-wide artwork, replete with whitespace, custom fonts. You love developing an entire app in the browser against a scalable back-end.
And because you love it, it’s what you do. You wake up in the morning thinking about what you can make. You open Photoshop before you consult your to-do list because there’s something you just need to tweak. You launch xterm before Highrise because the server was running just a tad more slowly than you’d expect and you want to paw through log files.
The trouble is, this is almost certainly not the activity that would most benefit your startup.
As much as you’re a minor deity when it comes to TextMate or Balsamiq, so are almost all the technical founders of all high-tech startups. We can all write code — at least well enough to get a product launched and through a few iterations. We can all make a functional website — at least well enough to produce orders.
Most startups fail, despite excellent coding and/or design skills. Yet, because that’s your love, your passion, that’s the stuff you dwell on.
Most startups fail because because not enough people show up on the home page, or people show up but they don’t try the product, or they don’t pay for the product, or it’s too expensive to get them to show up, or they don’t tell their friends to come along, or because it’s not solving a pain that people have, or it’s not solving a pain that people know they have, or it’s too hard to explain the pain, or a bunch of other things that are not whether the code works or whether it looks good.
Customers don’t open their wallets based on your unit test coverage or whether you used Bodoni instead of Times New Roman on the home page. In fact I’ve made millions of dollars on companies with hideously ugly websites and buggy code . Those things are actually not the most important things.
So if these things — the raw materials and skills used in web-based startups — are necessary but insufficient, what are those things outside your comfort zone which nevertheless are the things that are actually valuable to your company?
Here are two:
1. Have you talked to 50 potential customers? By that I mean fifty, not a dozen. I once vetted an idea and after the first 10 interviews I thought I was really on to something. Suddenly things changed and future interviews weren’t so clear. Turns out there was accidental bias in the people I selected, obvious only in hindsight. Another time, everyone said it was a great idea, but it wasn’t , which was only clear after dozens of interviews. Do you find it hard to locate that many people? Well it will still be hard to locate them after you’ve built a product, and then it’s unlikely the product matches what they want! So solve that hard problem now. Don’t forget to vet the price at the same time , otherwise it doesn’t count.
2. Are people coming to your website every day? If not, solving that is much harder and much more outside your control than building software. Consider: Would you rather get hired as the CTO of a company with 1,000 daily new, unique, qualified visitors with no product, or the CTO of a company with a stable product and 10 uniques visits to the home page? You know you can solve for the first case; who knows about the second? But if you stay nose-down in the code instead of working on getting attention, that’s exactly the company you’re building.
Here’s a coder-centric way of thinking about all this more generically: When you tackle a large development project, do you tackle the high-risk, inadequately-understood modules first, or leave those to the end? First, of course, because you understand the rest and you need to solve the unknown problems while you still have lots of time to pivot and re-plan.
This is the same thing, it’s just that in a business it’s the attention, marketing, positioning, selling, defining part that’s high-risk and inadequately-understood, and all of the coding and design is low-risk and well-understood in comparison.
So force yourself out of your comfort zone. You’ll also do coding and design and that’s fine of course. But force yourself to mostly do those other things that create a valuable business.
Jason Cohen is the founder of WP Engine and Smart Bear Software .
This story originally appeared on Jason Cohen .
